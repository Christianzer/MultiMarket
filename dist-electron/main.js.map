{"version":3,"file":"main.js","sources":["../electron/main.ts"],"sourcesContent":["import { app, BrowserWindow, shell, ipcMain } from 'electron'\r\nimport { createRequire } from 'node:module'\r\nimport { fileURLToPath } from 'node:url'\r\nimport path from 'node:path'\r\n\r\nconst require = createRequire(import.meta.url)\r\nconst __dirname = path.dirname(fileURLToPath(import.meta.url))\r\n\r\n// The built directory structure\r\n//\r\n// ├─┬─┬ dist\r\n// │ │ └── index.html\r\n// │ │\r\n// │ ├─┬ dist-electron\r\n// │ │ ├── main.js\r\n// │ │ └── preload.mjs\r\n// │\r\nprocess.env.APP_ROOT = path.join(__dirname, '..')\r\n\r\nexport const VITE_DEV_SERVER_URL = process.env.VITE_DEV_SERVER_URL\r\nexport const MAIN_DIST = path.join(process.env.APP_ROOT, 'dist-electron')\r\nexport const RENDERER_DIST = path.join(process.env.APP_ROOT, 'dist')\r\n\r\nprocess.env.VITE_PUBLIC = VITE_DEV_SERVER_URL ? path.join(process.env.APP_ROOT, 'public') : RENDERER_DIST\r\n\r\nlet win: BrowserWindow | null\r\n\r\nfunction createWindow() {\r\n  win = new BrowserWindow({\r\n    width: 1200,\r\n    height: 800,\r\n    minWidth: 800,\r\n    minHeight: 600,\r\n    icon: path.join(process.env.VITE_PUBLIC, 'favicon.ico'),\r\n    autoHideMenuBar: true,\r\n    webPreferences: {\r\n      preload: path.join(__dirname, 'preload.mjs'),\r\n      nodeIntegration: false,\r\n      contextIsolation: true,\r\n    },\r\n  })\r\n\r\n  // Test active push message to Renderer-process.\r\n  win.webContents.on('did-finish-load', () => {\r\n    win?.webContents.send('main-process-message', new Date().toLocaleString())\r\n  })\r\n\r\n  if (VITE_DEV_SERVER_URL) {\r\n    win.loadURL(VITE_DEV_SERVER_URL)\r\n    win.webContents.openDevTools()\r\n  } else {\r\n    // win.loadFile('dist/index.html')\r\n    win.loadFile(path.join(RENDERER_DIST, 'index.html'))\r\n  }\r\n\r\n  // Make all links open with the browser, not with the application\r\n  win.webContents.setWindowOpenHandler(({ url }) => {\r\n    if (url.startsWith('https:')) shell.openExternal(url)\r\n    return { action: 'deny' }\r\n  })\r\n}\r\n\r\n// This method will be called when Electron has finished\r\n// initialization and is ready to create browser windows.\r\n// Some APIs can only be used after this event occurs.\r\napp.whenReady().then(createWindow)\r\n\r\n// Quit when all windows are closed, except on macOS. There, it's common\r\n// for applications and their menu bar to stay active until the user quits\r\n// explicitly with Cmd + Q.\r\napp.on('window-all-closed', () => {\r\n  if (process.platform !== 'darwin') {\r\n    app.quit()\r\n  }\r\n})\r\n\r\napp.on('activate', () => {\r\n  // On OS X it's common to re-create a window in the app when the\r\n  // dock icon is clicked and there are no other windows open.\r\n  if (BrowserWindow.getAllWindows().length === 0) {\r\n    createWindow()\r\n  }\r\n})\r\n\r\n// In this file you can include the rest of your app's specific main process\r\n// code. You can also put them in separate files and require them here.\r\n\r\n// --------- IPC Handlers for Printing and Window Controls ---------\r\n\r\n// Gestionnaire pour l'impression de reçus POS\r\nipcMain.handle('print-receipt', async (event, htmlContent: string) => {\r\n  try {\r\n    // Créer une fenêtre cachée pour l'impression POS\r\n    const printWindow = new BrowserWindow({\r\n      width: 300, // Largeur exacte pour imprimante POS 80mm\r\n      height: 800, // Hauteur plus grande pour les longs reçus\r\n      show: false, // En développement, mettre à true pour déboguer\r\n      webPreferences: {\r\n        nodeIntegration: false,\r\n        contextIsolation: true\r\n      }\r\n    })\r\n\r\n    // Charger le contenu HTML\r\n    await printWindow.loadURL(`data:text/html;charset=utf-8,${encodeURIComponent(htmlContent)}`)\r\n\r\n    // Attendre que le contenu soit complètement chargé et rendu\r\n    await new Promise(resolve => {\r\n      printWindow.webContents.once('did-finish-load', () => {\r\n        // Attendre un peu plus pour s'assurer que le CSS est appliqué\r\n        setTimeout(resolve, 500)\r\n      })\r\n    })\r\n\r\n    // Options d'impression optimisées pour imprimantes POS\r\n    const printOptions: any = {\r\n      silent: true, // Impression silencieuse sans dialogue\r\n      printBackground: true, // Inclure les arrière-plans\r\n      color: false, // Impression en noir et blanc pour POS\r\n      margins: {\r\n        marginType: 'custom' as const,\r\n        top: 0,    // Pas de marge haute\r\n        bottom: 0, // Pas de marge basse  \r\n        left: 0,   // Pas de marge gauche\r\n        right: 0   // Pas de marge droite\r\n      },\r\n      pageSize: {\r\n        width: 79000,  // 79mm en microns (légèrement moins que 80mm pour éviter la coupure)\r\n        height: 297000 // Hauteur variable automatique (A4 = 297mm, sera ajustée automatiquement)\r\n      },\r\n      scaleFactor: 100, // Échelle 100% pour taille réelle\r\n      landscape: false, // Portrait pour reçu\r\n      copies: 1,        // Une seule copie\r\n      pageRanges: {},   // Toutes les pages\r\n      duplexMode: 'simplex', // Impression simple face\r\n      collate: true,\r\n      // Paramètres spécifiques POS\r\n      headerFooter: false, // Pas d'en-tête/pied de page automatique\r\n      shouldPrintBackgrounds: true,\r\n      shouldPrintSelectionOnly: false\r\n    }\r\n\r\n    // Utiliser l'imprimante sélectionnée si disponible\r\n    if (selectedPrinter) {\r\n      printOptions.deviceName = selectedPrinter\r\n      console.log('Impression vers:', selectedPrinter)\r\n    } else {\r\n      console.log('Aucune imprimante POS sélectionnée, utilisation de l\\'imprimante par défaut')\r\n    }\r\n\r\n    // Imprimer avec gestion d'erreur améliorée\r\n    const result = await printWindow.webContents.print(printOptions)\r\n    \r\n    // Log pour déboguer en développement\r\n    console.log('Impression POS:', result ? 'Réussie' : 'Échouée ou Annulée')\r\n    \r\n    // Fermer la fenêtre d'impression après un délai\r\n    setTimeout(() => {\r\n      if (!printWindow.isDestroyed()) {\r\n        printWindow.close()\r\n      }\r\n    }, 2000) // Délai plus long pour s'assurer que l'impression est terminée\r\n    \r\n    return { \r\n      success: true, \r\n      printed: result,\r\n      message: result ? 'Reçu imprimé avec succès' : 'Impression annulée ou échouée'\r\n    }\r\n  } catch (error) {\r\n    console.error('Erreur lors de l\\'impression POS:', error)\r\n    return { \r\n      success: false, \r\n      error: (error as Error).message,\r\n      message: 'Erreur d\\'impression - Vérifiez que l\\'imprimante POS est connectée'\r\n    }\r\n  }\r\n})\r\n\r\n// Gestionnaire pour ouvrir les DevTools\r\nipcMain.handle('open-dev-tools', () => {\r\n  if (win) {\r\n    win.webContents.openDevTools()\r\n  }\r\n})\r\n\r\n// Gestionnaires pour les contrôles de fenêtre\r\nipcMain.handle('window-minimize', () => {\r\n  if (win) {\r\n    win.minimize()\r\n  }\r\n})\r\n\r\nipcMain.handle('window-maximize', () => {\r\n  if (win) {\r\n    if (win.isMaximized()) {\r\n      win.unmaximize()\r\n    } else {\r\n      win.maximize()\r\n    }\r\n  }\r\n})\r\n\r\nipcMain.handle('window-close', () => {\r\n  if (win) {\r\n    win.close()\r\n  }\r\n})\r\n\r\n// Variables pour gérer l'imprimante POS sélectionnée\r\nlet selectedPrinter: string | null = null\r\n\r\n// Gestionnaire pour lister les imprimantes disponibles\r\nipcMain.handle('get-printers', async () => {\r\n  try {\r\n    if (win) {\r\n      const printers = await win.webContents.getPrintersAsync()\r\n      \r\n      // Filtrer et identifier les imprimantes POS probables\r\n      const posKeywords = ['pos', 'thermal', 'receipt', 'tm', 'epson', 'star', 'citizen', 'bixolon', 'zebra', 'esc']\r\n      \r\n      const printersWithType = printers.map(printer => ({\r\n        ...printer,\r\n        isPOS: posKeywords.some(keyword => \r\n          printer.name.toLowerCase().includes(keyword) || \r\n          printer.description?.toLowerCase().includes(keyword)\r\n        )\r\n      }))\r\n      \r\n      console.log('Imprimantes détectées:', printersWithType.length)\r\n      printersWithType.forEach(p => {\r\n        console.log(`- ${p.name} ${p.isPOS ? '(POS)' : '(Standard)'}: ${p.description}`)\r\n      })\r\n      \r\n      return {\r\n        success: true,\r\n        printers: printersWithType,\r\n        selectedPrinter\r\n      }\r\n    }\r\n    return { success: false, error: 'Fenêtre non disponible' }\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des imprimantes:', error)\r\n    return { \r\n      success: false, \r\n      error: (error as Error).message,\r\n      printers: []\r\n    }\r\n  }\r\n})\r\n\r\n// Gestionnaire pour définir l'imprimante POS à utiliser\r\nipcMain.handle('set-printer', async (event, printerName: string) => {\r\n  try {\r\n    selectedPrinter = printerName\r\n    console.log('Imprimante POS sélectionnée:', printerName)\r\n    return { success: true, printer: printerName }\r\n  } catch (error) {\r\n    console.error('Erreur lors de la sélection de l\\'imprimante:', error)\r\n    return { success: false, error: (error as Error).message }\r\n  }\r\n})"],"names":[],"mappings":"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"}